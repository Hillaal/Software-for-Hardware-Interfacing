
Lab 8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000340  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080004d4  080004d4  000104d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004e0  080004e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080004e0  080004e0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004e0  080004e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004e0  080004e0  000104e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004e4  080004e4  000104e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080004e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000000c  080004f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080004f4  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000793  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000024a  00000000  00000000  000207cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00020a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  00020ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dca7  00000000  00000000  00020b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000796  00000000  00000000  0002e7df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fa7a  00000000  00000000  0002ef75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007e9ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000168  00000000  00000000  0007ea44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004bc 	.word	0x080004bc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080004bc 	.word	0x080004bc

080001d4 <GPIO_EnableClock>:
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
 80001de:	4b08      	ldr	r3, [pc, #32]	; (8000200 <GPIO_EnableClock+0x2c>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	79fa      	ldrb	r2, [r7, #7]
 80001e4:	2101      	movs	r1, #1
 80001e6:	fa01 f202 	lsl.w	r2, r1, r2
 80001ea:	4611      	mov	r1, r2
 80001ec:	4a04      	ldr	r2, [pc, #16]	; (8000200 <GPIO_EnableClock+0x2c>)
 80001ee:	430b      	orrs	r3, r1
 80001f0:	6013      	str	r3, [r2, #0]
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	40023830 	.word	0x40023830

08000204 <GPIO_Init>:
 8000204:	b490      	push	{r4, r7}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	4604      	mov	r4, r0
 800020c:	4608      	mov	r0, r1
 800020e:	4611      	mov	r1, r2
 8000210:	461a      	mov	r2, r3
 8000212:	4623      	mov	r3, r4
 8000214:	71fb      	strb	r3, [r7, #7]
 8000216:	4603      	mov	r3, r0
 8000218:	71bb      	strb	r3, [r7, #6]
 800021a:	460b      	mov	r3, r1
 800021c:	717b      	strb	r3, [r7, #5]
 800021e:	4613      	mov	r3, r2
 8000220:	713b      	strb	r3, [r7, #4]
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	4a3b      	ldr	r2, [pc, #236]	; (8000314 <GPIO_Init+0x110>)
 8000226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	79ba      	ldrb	r2, [r7, #6]
 800022e:	0052      	lsls	r2, r2, #1
 8000230:	2103      	movs	r1, #3
 8000232:	fa01 f202 	lsl.w	r2, r1, r2
 8000236:	43d2      	mvns	r2, r2
 8000238:	4610      	mov	r0, r2
 800023a:	79fa      	ldrb	r2, [r7, #7]
 800023c:	4935      	ldr	r1, [pc, #212]	; (8000314 <GPIO_Init+0x110>)
 800023e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000242:	4003      	ands	r3, r0
 8000244:	6013      	str	r3, [r2, #0]
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	4a32      	ldr	r2, [pc, #200]	; (8000314 <GPIO_Init+0x110>)
 800024a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	7979      	ldrb	r1, [r7, #5]
 8000252:	79ba      	ldrb	r2, [r7, #6]
 8000254:	0052      	lsls	r2, r2, #1
 8000256:	fa01 f202 	lsl.w	r2, r1, r2
 800025a:	4610      	mov	r0, r2
 800025c:	79fa      	ldrb	r2, [r7, #7]
 800025e:	492d      	ldr	r1, [pc, #180]	; (8000314 <GPIO_Init+0x110>)
 8000260:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000264:	4303      	orrs	r3, r0
 8000266:	6013      	str	r3, [r2, #0]
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	4a2a      	ldr	r2, [pc, #168]	; (8000314 <GPIO_Init+0x110>)
 800026c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000270:	3304      	adds	r3, #4
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	79ba      	ldrb	r2, [r7, #6]
 8000276:	2101      	movs	r1, #1
 8000278:	fa01 f202 	lsl.w	r2, r1, r2
 800027c:	43d2      	mvns	r2, r2
 800027e:	4610      	mov	r0, r2
 8000280:	79fa      	ldrb	r2, [r7, #7]
 8000282:	4924      	ldr	r1, [pc, #144]	; (8000314 <GPIO_Init+0x110>)
 8000284:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000288:	3204      	adds	r2, #4
 800028a:	4003      	ands	r3, r0
 800028c:	6013      	str	r3, [r2, #0]
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	4a20      	ldr	r2, [pc, #128]	; (8000314 <GPIO_Init+0x110>)
 8000292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000296:	3304      	adds	r3, #4
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	793a      	ldrb	r2, [r7, #4]
 800029c:	f002 0101 	and.w	r1, r2, #1
 80002a0:	79ba      	ldrb	r2, [r7, #6]
 80002a2:	fa01 f202 	lsl.w	r2, r1, r2
 80002a6:	4610      	mov	r0, r2
 80002a8:	79fa      	ldrb	r2, [r7, #7]
 80002aa:	491a      	ldr	r1, [pc, #104]	; (8000314 <GPIO_Init+0x110>)
 80002ac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80002b0:	3204      	adds	r2, #4
 80002b2:	4303      	orrs	r3, r0
 80002b4:	6013      	str	r3, [r2, #0]
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	4a16      	ldr	r2, [pc, #88]	; (8000314 <GPIO_Init+0x110>)
 80002ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002be:	330c      	adds	r3, #12
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	79ba      	ldrb	r2, [r7, #6]
 80002c4:	0052      	lsls	r2, r2, #1
 80002c6:	2103      	movs	r1, #3
 80002c8:	fa01 f202 	lsl.w	r2, r1, r2
 80002cc:	43d2      	mvns	r2, r2
 80002ce:	4610      	mov	r0, r2
 80002d0:	79fa      	ldrb	r2, [r7, #7]
 80002d2:	4910      	ldr	r1, [pc, #64]	; (8000314 <GPIO_Init+0x110>)
 80002d4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80002d8:	320c      	adds	r2, #12
 80002da:	4003      	ands	r3, r0
 80002dc:	6013      	str	r3, [r2, #0]
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	4a0c      	ldr	r2, [pc, #48]	; (8000314 <GPIO_Init+0x110>)
 80002e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e6:	330c      	adds	r3, #12
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	793a      	ldrb	r2, [r7, #4]
 80002ec:	1052      	asrs	r2, r2, #1
 80002ee:	f002 0103 	and.w	r1, r2, #3
 80002f2:	79ba      	ldrb	r2, [r7, #6]
 80002f4:	0052      	lsls	r2, r2, #1
 80002f6:	fa01 f202 	lsl.w	r2, r1, r2
 80002fa:	4610      	mov	r0, r2
 80002fc:	79fa      	ldrb	r2, [r7, #7]
 80002fe:	4905      	ldr	r1, [pc, #20]	; (8000314 <GPIO_Init+0x110>)
 8000300:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000304:	320c      	adds	r2, #12
 8000306:	4303      	orrs	r3, r0
 8000308:	6013      	str	r3, [r2, #0]
 800030a:	bf00      	nop
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bc90      	pop	{r4, r7}
 8000312:	4770      	bx	lr
 8000314:	20000000 	.word	0x20000000

08000318 <main>:

#define TC 		(REG(USART2,USART_SR)&(1<<6))	/*Transmission complete bit*/



int main(void) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0

	GPIO_EnableClock(A);		/*enable GPIO clock*/ /* 0 for GPIOA and 1 for GPIOB */
 800031e:	2000      	movs	r0, #0
 8000320:	f7ff ff58 	bl	80001d4 <GPIO_EnableClock>
	REG(GPIOA,GPIO_AFRL) |= (0x07<<8);		/*AF7 (USART2) on pin 2 */
 8000324:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <main+0xc4>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a2c      	ldr	r2, [pc, #176]	; (80003dc <main+0xc4>)
 800032a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800032e:	6013      	str	r3, [r2, #0]
	GPIO_Init(A, 2,ALTERNATE_FUN,PUSH_PULL);		/*GPIOA pin2 Tx2 configuration */
 8000330:	2300      	movs	r3, #0
 8000332:	2202      	movs	r2, #2
 8000334:	2102      	movs	r1, #2
 8000336:	2000      	movs	r0, #0
 8000338:	f7ff ff64 	bl	8000204 <GPIO_Init>

	REG(RCC,RCC_APB1ENR) |= (1<<17);		/*USART2 peripheral clock Enable*/
 800033c:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <main+0xc8>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a27      	ldr	r2, [pc, #156]	; (80003e0 <main+0xc8>)
 8000342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000346:	6013      	str	r3, [r2, #0]

	REG(USART2,USART_CR1) |= (1<<13);		/*USART2 Enable*/
 8000348:	4b26      	ldr	r3, [pc, #152]	; (80003e4 <main+0xcc>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a25      	ldr	r2, [pc, #148]	; (80003e4 <main+0xcc>)
 800034e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000352:	6013      	str	r3, [r2, #0]
	REG(USART2,USART_CR1) |= (1<<3);		/*USART2 transmitter Enable*/
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <main+0xcc>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a22      	ldr	r2, [pc, #136]	; (80003e4 <main+0xcc>)
 800035a:	f043 0308 	orr.w	r3, r3, #8
 800035e:	6013      	str	r3, [r2, #0]
	REG(USART2,USART_CR1) &= ~(1<<15);		/*USART2 configuration: over sampling by 16*/
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <main+0xcc>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a1f      	ldr	r2, [pc, #124]	; (80003e4 <main+0xcc>)
 8000366:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800036a:	6013      	str	r3, [r2, #0]
	REG(USART2,USART_CR1) &= ~(1<<12);		/*USART2 configuration: 1 Start bit, 8 Data bits*/
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <main+0xcc>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a1c      	ldr	r2, [pc, #112]	; (80003e4 <main+0xcc>)
 8000372:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000376:	6013      	str	r3, [r2, #0]

	REG(USART2,USART_CR2) &= ~(0x3<<12);		/*USART2 configuration 1 Stop bit*/
 8000378:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <main+0xd0>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a1a      	ldr	r2, [pc, #104]	; (80003e8 <main+0xd0>)
 800037e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000382:	6013      	str	r3, [r2, #0]

	REG(USART2,USART_BRR) |= 0x683;				/*USART2 9600 baud rate generation configuration */
 8000384:	4b19      	ldr	r3, [pc, #100]	; (80003ec <main+0xd4>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a18      	ldr	r2, [pc, #96]	; (80003ec <main+0xd4>)
 800038a:	f443 63d0 	orr.w	r3, r3, #1664	; 0x680
 800038e:	f043 0303 	orr.w	r3, r3, #3
 8000392:	6013      	str	r3, [r2, #0]

	unsigned char string[]="Hello World";	/*array of characters that will be sent */
 8000394:	4a16      	ldr	r2, [pc, #88]	; (80003f0 <main+0xd8>)
 8000396:	463b      	mov	r3, r7
 8000398:	ca07      	ldmia	r2, {r0, r1, r2}
 800039a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	unsigned char i;

	for(i=0;string[i] != '\0';i++){			/*loop over the string*/
 800039e:	2300      	movs	r3, #0
 80003a0:	73fb      	strb	r3, [r7, #15]
 80003a2:	e011      	b.n	80003c8 <main+0xb0>
		REG(USART2,USART_DR) = string[i];	/*put the character in the data register*/
 80003a4:	7bfb      	ldrb	r3, [r7, #15]
 80003a6:	f107 0210 	add.w	r2, r7, #16
 80003aa:	4413      	add	r3, r2
 80003ac:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80003b0:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <main+0xdc>)
 80003b2:	601a      	str	r2, [r3, #0]
		while(TC==0){		/*Waiting for TC to SET meaning that the data has been transmitted */
 80003b4:	bf00      	nop
 80003b6:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <main+0xe0>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d0f9      	beq.n	80003b6 <main+0x9e>
	for(i=0;string[i] != '\0';i++){			/*loop over the string*/
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
 80003c4:	3301      	adds	r3, #1
 80003c6:	73fb      	strb	r3, [r7, #15]
 80003c8:	7bfb      	ldrb	r3, [r7, #15]
 80003ca:	f107 0210 	add.w	r2, r7, #16
 80003ce:	4413      	add	r3, r2
 80003d0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d1e5      	bne.n	80003a4 <main+0x8c>
			}
	}

    while (1) {
 80003d8:	e7fe      	b.n	80003d8 <main+0xc0>
 80003da:	bf00      	nop
 80003dc:	40020020 	.word	0x40020020
 80003e0:	40023840 	.word	0x40023840
 80003e4:	4000440c 	.word	0x4000440c
 80003e8:	40004410 	.word	0x40004410
 80003ec:	40004408 	.word	0x40004408
 80003f0:	080004d4 	.word	0x080004d4
 80003f4:	40004404 	.word	0x40004404
 80003f8:	40004400 	.word	0x40004400

080003fc <SystemInit>:
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <SystemInit+0x20>)
 8000402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000406:	4a05      	ldr	r2, [pc, #20]	; (800041c <SystemInit+0x20>)
 8000408:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800040c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	e000ed00 	.word	0xe000ed00

08000420 <Reset_Handler>:
 8000420:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000458 <LoopFillZerobss+0x12>
 8000424:	480d      	ldr	r0, [pc, #52]	; (800045c <LoopFillZerobss+0x16>)
 8000426:	490e      	ldr	r1, [pc, #56]	; (8000460 <LoopFillZerobss+0x1a>)
 8000428:	4a0e      	ldr	r2, [pc, #56]	; (8000464 <LoopFillZerobss+0x1e>)
 800042a:	2300      	movs	r3, #0
 800042c:	e002      	b.n	8000434 <LoopCopyDataInit>

0800042e <CopyDataInit>:
 800042e:	58d4      	ldr	r4, [r2, r3]
 8000430:	50c4      	str	r4, [r0, r3]
 8000432:	3304      	adds	r3, #4

08000434 <LoopCopyDataInit>:
 8000434:	18c4      	adds	r4, r0, r3
 8000436:	428c      	cmp	r4, r1
 8000438:	d3f9      	bcc.n	800042e <CopyDataInit>
 800043a:	4a0b      	ldr	r2, [pc, #44]	; (8000468 <LoopFillZerobss+0x22>)
 800043c:	4c0b      	ldr	r4, [pc, #44]	; (800046c <LoopFillZerobss+0x26>)
 800043e:	2300      	movs	r3, #0
 8000440:	e001      	b.n	8000446 <LoopFillZerobss>

08000442 <FillZerobss>:
 8000442:	6013      	str	r3, [r2, #0]
 8000444:	3204      	adds	r2, #4

08000446 <LoopFillZerobss>:
 8000446:	42a2      	cmp	r2, r4
 8000448:	d3fb      	bcc.n	8000442 <FillZerobss>
 800044a:	f7ff ffd7 	bl	80003fc <SystemInit>
 800044e:	f000 f811 	bl	8000474 <__libc_init_array>
 8000452:	f7ff ff61 	bl	8000318 <main>
 8000456:	4770      	bx	lr
 8000458:	20010000 	.word	0x20010000
 800045c:	20000000 	.word	0x20000000
 8000460:	2000000c 	.word	0x2000000c
 8000464:	080004e8 	.word	0x080004e8
 8000468:	2000000c 	.word	0x2000000c
 800046c:	20000028 	.word	0x20000028

08000470 <ADC_IRQHandler>:
 8000470:	e7fe      	b.n	8000470 <ADC_IRQHandler>
	...

08000474 <__libc_init_array>:
 8000474:	b570      	push	{r4, r5, r6, lr}
 8000476:	4d0d      	ldr	r5, [pc, #52]	; (80004ac <__libc_init_array+0x38>)
 8000478:	4c0d      	ldr	r4, [pc, #52]	; (80004b0 <__libc_init_array+0x3c>)
 800047a:	1b64      	subs	r4, r4, r5
 800047c:	10a4      	asrs	r4, r4, #2
 800047e:	2600      	movs	r6, #0
 8000480:	42a6      	cmp	r6, r4
 8000482:	d109      	bne.n	8000498 <__libc_init_array+0x24>
 8000484:	4d0b      	ldr	r5, [pc, #44]	; (80004b4 <__libc_init_array+0x40>)
 8000486:	4c0c      	ldr	r4, [pc, #48]	; (80004b8 <__libc_init_array+0x44>)
 8000488:	f000 f818 	bl	80004bc <_init>
 800048c:	1b64      	subs	r4, r4, r5
 800048e:	10a4      	asrs	r4, r4, #2
 8000490:	2600      	movs	r6, #0
 8000492:	42a6      	cmp	r6, r4
 8000494:	d105      	bne.n	80004a2 <__libc_init_array+0x2e>
 8000496:	bd70      	pop	{r4, r5, r6, pc}
 8000498:	f855 3b04 	ldr.w	r3, [r5], #4
 800049c:	4798      	blx	r3
 800049e:	3601      	adds	r6, #1
 80004a0:	e7ee      	b.n	8000480 <__libc_init_array+0xc>
 80004a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a6:	4798      	blx	r3
 80004a8:	3601      	adds	r6, #1
 80004aa:	e7f2      	b.n	8000492 <__libc_init_array+0x1e>
 80004ac:	080004e0 	.word	0x080004e0
 80004b0:	080004e0 	.word	0x080004e0
 80004b4:	080004e0 	.word	0x080004e0
 80004b8:	080004e4 	.word	0x080004e4

080004bc <_init>:
 80004bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004be:	bf00      	nop
 80004c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c2:	bc08      	pop	{r3}
 80004c4:	469e      	mov	lr, r3
 80004c6:	4770      	bx	lr

080004c8 <_fini>:
 80004c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ca:	bf00      	nop
 80004cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ce:	bc08      	pop	{r3}
 80004d0:	469e      	mov	lr, r3
 80004d2:	4770      	bx	lr
