
task 3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000640  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007d4  080007dc  000107dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007d4  080007d4  000107dc  2**0
                  CONTENTS
  4 .ARM          00000000  080007d4  080007d4  000107dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007d4  080007dc  000107dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007d4  080007d4  000107d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007d8  080007d8  000107d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000107dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080007dc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080007dc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000107dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b9d  00000000  00000000  0001080c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000317  00000000  00000000  000113a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a0  00000000  00000000  000116c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000068  00000000  00000000  00011760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000de8b  00000000  00000000  000117c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000010fe  00000000  00000000  0001f653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fc84  00000000  00000000  00020751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000703d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000013c  00000000  00000000  00070428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080007bc 	.word	0x080007bc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080007bc 	.word	0x080007bc

080001d4 <main>:
*/
#include "GPIO.h"
#include "stm32f401xc.h"
#include "stm32f401cc_interface.h"

int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0

	unsigned char color=1;
 80001da:	2301      	movs	r3, #1
 80001dc:	71fb      	strb	r3, [r7, #7]
	int i;

	GPIO_Init('B',3,INPUT,PULL_UP); /*initialize portB pin3 as input*/
 80001de:	2303      	movs	r3, #3
 80001e0:	2200      	movs	r2, #0
 80001e2:	2103      	movs	r1, #3
 80001e4:	2042      	movs	r0, #66	; 0x42
 80001e6:	f000 f8b1 	bl	800034c <GPIO_Init>

	GPIO_Init('B',5,OUTPUT,PUSH_PULL);
 80001ea:	2300      	movs	r3, #0
 80001ec:	2201      	movs	r2, #1
 80001ee:	2105      	movs	r1, #5
 80001f0:	2042      	movs	r0, #66	; 0x42
 80001f2:	f000 f8ab 	bl	800034c <GPIO_Init>
	GPIO_Init('B',6,OUTPUT,PUSH_PULL);   /*initialize portB pin 5,6,7 as outputs*/
 80001f6:	2300      	movs	r3, #0
 80001f8:	2201      	movs	r2, #1
 80001fa:	2106      	movs	r1, #6
 80001fc:	2042      	movs	r0, #66	; 0x42
 80001fe:	f000 f8a5 	bl	800034c <GPIO_Init>
	GPIO_Init('B',7,OUTPUT,PUSH_PULL);
 8000202:	2300      	movs	r3, #0
 8000204:	2201      	movs	r2, #1
 8000206:	2107      	movs	r1, #7
 8000208:	2042      	movs	r0, #66	; 0x42
 800020a:	f000 f89f 	bl	800034c <GPIO_Init>

	GPIO_WritePin('B',5,0);
 800020e:	2200      	movs	r2, #0
 8000210:	2105      	movs	r1, #5
 8000212:	2042      	movs	r0, #66	; 0x42
 8000214:	f000 f9de 	bl	80005d4 <GPIO_WritePin>
	GPIO_WritePin('B',6,0); /*set the RGB led to first color black*/
 8000218:	2200      	movs	r2, #0
 800021a:	2106      	movs	r1, #6
 800021c:	2042      	movs	r0, #66	; 0x42
 800021e:	f000 f9d9 	bl	80005d4 <GPIO_WritePin>
	GPIO_WritePin('B',7,0);
 8000222:	2200      	movs	r2, #0
 8000224:	2107      	movs	r1, #7
 8000226:	2042      	movs	r0, #66	; 0x42
 8000228:	f000 f9d4 	bl	80005d4 <GPIO_WritePin>

  while (1) {

	  if(GPIO_ReadPin('B',3)==0){     /*check if the button is pressed*/
 800022c:	2103      	movs	r1, #3
 800022e:	2042      	movs	r0, #66	; 0x42
 8000230:	f000 fa42 	bl	80006b8 <GPIO_ReadPin>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d1f8      	bne.n	800022c <main+0x58>

		  for(i=0;i<50000;i++){}	/*delay nearly 50ms before check the button again for debouncing*/
 800023a:	2300      	movs	r3, #0
 800023c:	603b      	str	r3, [r7, #0]
 800023e:	e002      	b.n	8000246 <main+0x72>
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	3301      	adds	r3, #1
 8000244:	603b      	str	r3, [r7, #0]
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800024c:	4293      	cmp	r3, r2
 800024e:	ddf7      	ble.n	8000240 <main+0x6c>

		  if(GPIO_ReadPin('B',3)==0){	/*check again if the button is pressed*/
 8000250:	2103      	movs	r1, #3
 8000252:	2042      	movs	r0, #66	; 0x42
 8000254:	f000 fa30 	bl	80006b8 <GPIO_ReadPin>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d1e6      	bne.n	800022c <main+0x58>
			  while (GPIO_ReadPin('B',3)==0){} /*wait to detect falling edge*/
 800025e:	bf00      	nop
 8000260:	2103      	movs	r1, #3
 8000262:	2042      	movs	r0, #66	; 0x42
 8000264:	f000 fa28 	bl	80006b8 <GPIO_ReadPin>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d0f8      	beq.n	8000260 <main+0x8c>

			  GPIO_WritePin('B',5,0);
 800026e:	2200      	movs	r2, #0
 8000270:	2105      	movs	r1, #5
 8000272:	2042      	movs	r0, #66	; 0x42
 8000274:	f000 f9ae 	bl	80005d4 <GPIO_WritePin>
			  GPIO_WritePin('B',6,0);/*clear the three bits to put next color*/
 8000278:	2200      	movs	r2, #0
 800027a:	2106      	movs	r1, #6
 800027c:	2042      	movs	r0, #66	; 0x42
 800027e:	f000 f9a9 	bl	80005d4 <GPIO_WritePin>
			  GPIO_WritePin('B',7,0);
 8000282:	2200      	movs	r2, #0
 8000284:	2107      	movs	r1, #7
 8000286:	2042      	movs	r0, #66	; 0x42
 8000288:	f000 f9a4 	bl	80005d4 <GPIO_WritePin>

			  GPIO_WritePin('B',5,((1<<5)&(color<<5)));
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	015b      	lsls	r3, r3, #5
 8000290:	f003 0320 	and.w	r3, r3, #32
 8000294:	461a      	mov	r2, r3
 8000296:	2105      	movs	r1, #5
 8000298:	2042      	movs	r0, #66	; 0x42
 800029a:	f000 f99b 	bl	80005d4 <GPIO_WritePin>
			  GPIO_WritePin('B',6,((1<<6)&(color<<5)));	/*set the RGB led to next color*/
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	015b      	lsls	r3, r3, #5
 80002a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002a6:	461a      	mov	r2, r3
 80002a8:	2106      	movs	r1, #6
 80002aa:	2042      	movs	r0, #66	; 0x42
 80002ac:	f000 f992 	bl	80005d4 <GPIO_WritePin>
			  GPIO_WritePin('B',7,((1<<7)&(color<<5)));
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	015b      	lsls	r3, r3, #5
 80002b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002b8:	461a      	mov	r2, r3
 80002ba:	2107      	movs	r1, #7
 80002bc:	2042      	movs	r0, #66	; 0x42
 80002be:	f000 f989 	bl	80005d4 <GPIO_WritePin>

			  color++;
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	3301      	adds	r3, #1
 80002c6:	71fb      	strb	r3, [r7, #7]

			  if (8==color){
 80002c8:	79fb      	ldrb	r3, [r7, #7]
 80002ca:	2b08      	cmp	r3, #8
 80002cc:	d1ae      	bne.n	800022c <main+0x58>
				  color=0;			/*only have 8 colors from 0 to 7*/
 80002ce:	2300      	movs	r3, #0
 80002d0:	71fb      	strb	r3, [r7, #7]
	  if(GPIO_ReadPin('B',3)==0){     /*check if the button is pressed*/
 80002d2:	e7ab      	b.n	800022c <main+0x58>

080002d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <SystemInit+0x20>)
 80002da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002de:	4a05      	ldr	r2, [pc, #20]	; (80002f4 <SystemInit+0x20>)
 80002e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000330 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002fc:	480d      	ldr	r0, [pc, #52]	; (8000334 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80002fe:	490e      	ldr	r1, [pc, #56]	; (8000338 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000300:	4a0e      	ldr	r2, [pc, #56]	; (800033c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000304:	e002      	b.n	800030c <LoopCopyDataInit>

08000306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030a:	3304      	adds	r3, #4

0800030c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800030c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000310:	d3f9      	bcc.n	8000306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000312:	4a0b      	ldr	r2, [pc, #44]	; (8000340 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000314:	4c0b      	ldr	r4, [pc, #44]	; (8000344 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000318:	e001      	b.n	800031e <LoopFillZerobss>

0800031a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800031c:	3204      	adds	r2, #4

0800031e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000320:	d3fb      	bcc.n	800031a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000322:	f7ff ffd7 	bl	80002d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000326:	f000 fa25 	bl	8000774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800032a:	f7ff ff53 	bl	80001d4 <main>
  bx  lr    
 800032e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000330:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000338:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800033c:	080007dc 	.word	0x080007dc
  ldr r2, =_sbss
 8000340:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000344:	2000001c 	.word	0x2000001c

08000348 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000348:	e7fe      	b.n	8000348 <ADC_IRQHandler>
	...

0800034c <GPIO_Init>:
#include "GPIO.h"
#include "stm32f401xc.h"
#include "stm32f401cc_interface.h"

void GPIO_Init( char Port, unsigned int PIN_NO, unsigned int PIN_Dir, unsigned int Default_State)
{
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	60b9      	str	r1, [r7, #8]
 8000354:	607a      	str	r2, [r7, #4]
 8000356:	603b      	str	r3, [r7, #0]
 8000358:	4603      	mov	r3, r0
 800035a:	73fb      	strb	r3, [r7, #15]
	//enable clock of port
	switch (Port)
 800035c:	7bfb      	ldrb	r3, [r7, #15]
 800035e:	2b41      	cmp	r3, #65	; 0x41
 8000360:	d003      	beq.n	800036a <GPIO_Init+0x1e>
 8000362:	2b42      	cmp	r3, #66	; 0x42
 8000364:	f000 8094 	beq.w	8000490 <GPIO_Init+0x144>
					break;
				}//end switch
		break;
	}

}
 8000368:	e128      	b.n	80005bc <GPIO_Init+0x270>
				RCC_AHB1ENR |= (0x01 <<0);
 800036a:	4b97      	ldr	r3, [pc, #604]	; (80005c8 <GPIO_Init+0x27c>)
 800036c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036e:	4a96      	ldr	r2, [pc, #600]	; (80005c8 <GPIO_Init+0x27c>)
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	6313      	str	r3, [r2, #48]	; 0x30
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	2b03      	cmp	r3, #3
 800037a:	d83c      	bhi.n	80003f6 <GPIO_Init+0xaa>
 800037c:	a201      	add	r2, pc, #4	; (adr r2, 8000384 <GPIO_Init+0x38>)
 800037e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000382:	bf00      	nop
 8000384:	08000395 	.word	0x08000395
 8000388:	080003af 	.word	0x080003af
 800038c:	080003c7 	.word	0x080003c7
 8000390:	080003df 	.word	0x080003df
							GPIOA_MODER &= ~(0x03 << 2*PIN_NO);
 8000394:	4b8d      	ldr	r3, [pc, #564]	; (80005cc <GPIO_Init+0x280>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	68ba      	ldr	r2, [r7, #8]
 800039a:	0052      	lsls	r2, r2, #1
 800039c:	2103      	movs	r1, #3
 800039e:	fa01 f202 	lsl.w	r2, r1, r2
 80003a2:	43d2      	mvns	r2, r2
 80003a4:	4611      	mov	r1, r2
 80003a6:	4a89      	ldr	r2, [pc, #548]	; (80005cc <GPIO_Init+0x280>)
 80003a8:	400b      	ands	r3, r1
 80003aa:	6013      	str	r3, [r2, #0]
					break;
 80003ac:	e023      	b.n	80003f6 <GPIO_Init+0xaa>
							GPIOA_MODER |= (0x01 << 2*PIN_NO);
 80003ae:	4b87      	ldr	r3, [pc, #540]	; (80005cc <GPIO_Init+0x280>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	68ba      	ldr	r2, [r7, #8]
 80003b4:	0052      	lsls	r2, r2, #1
 80003b6:	2101      	movs	r1, #1
 80003b8:	fa01 f202 	lsl.w	r2, r1, r2
 80003bc:	4611      	mov	r1, r2
 80003be:	4a83      	ldr	r2, [pc, #524]	; (80005cc <GPIO_Init+0x280>)
 80003c0:	430b      	orrs	r3, r1
 80003c2:	6013      	str	r3, [r2, #0]
					break;
 80003c4:	e017      	b.n	80003f6 <GPIO_Init+0xaa>
							GPIOA_MODER |= (0x02 << 2*PIN_NO);
 80003c6:	4b81      	ldr	r3, [pc, #516]	; (80005cc <GPIO_Init+0x280>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	68ba      	ldr	r2, [r7, #8]
 80003cc:	0052      	lsls	r2, r2, #1
 80003ce:	2102      	movs	r1, #2
 80003d0:	fa01 f202 	lsl.w	r2, r1, r2
 80003d4:	4611      	mov	r1, r2
 80003d6:	4a7d      	ldr	r2, [pc, #500]	; (80005cc <GPIO_Init+0x280>)
 80003d8:	430b      	orrs	r3, r1
 80003da:	6013      	str	r3, [r2, #0]
					break;
 80003dc:	e00b      	b.n	80003f6 <GPIO_Init+0xaa>
							GPIOA_MODER |= (0x03 << 2*PIN_NO);
 80003de:	4b7b      	ldr	r3, [pc, #492]	; (80005cc <GPIO_Init+0x280>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	68ba      	ldr	r2, [r7, #8]
 80003e4:	0052      	lsls	r2, r2, #1
 80003e6:	2103      	movs	r1, #3
 80003e8:	fa01 f202 	lsl.w	r2, r1, r2
 80003ec:	4611      	mov	r1, r2
 80003ee:	4a77      	ldr	r2, [pc, #476]	; (80005cc <GPIO_Init+0x280>)
 80003f0:	430b      	orrs	r3, r1
 80003f2:	6013      	str	r3, [r2, #0]
					break;
 80003f4:	bf00      	nop
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	2b04      	cmp	r3, #4
 80003fa:	f200 80dc 	bhi.w	80005b6 <GPIO_Init+0x26a>
 80003fe:	a201      	add	r2, pc, #4	; (adr r2, 8000404 <GPIO_Init+0xb8>)
 8000400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000404:	08000419 	.word	0x08000419
 8000408:	08000431 	.word	0x08000431
 800040c:	08000445 	.word	0x08000445
 8000410:	0800045f 	.word	0x0800045f
 8000414:	08000477 	.word	0x08000477
							GPIOA_OTYPER &= ~(0x01<<PIN_NO);
 8000418:	4b6c      	ldr	r3, [pc, #432]	; (80005cc <GPIO_Init+0x280>)
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	2101      	movs	r1, #1
 800041e:	68ba      	ldr	r2, [r7, #8]
 8000420:	fa01 f202 	lsl.w	r2, r1, r2
 8000424:	43d2      	mvns	r2, r2
 8000426:	4611      	mov	r1, r2
 8000428:	4a68      	ldr	r2, [pc, #416]	; (80005cc <GPIO_Init+0x280>)
 800042a:	400b      	ands	r3, r1
 800042c:	6053      	str	r3, [r2, #4]
					break;
 800042e:	e02e      	b.n	800048e <GPIO_Init+0x142>
							GPIOA_OTYPER |= (0x01<<PIN_NO);
 8000430:	4b66      	ldr	r3, [pc, #408]	; (80005cc <GPIO_Init+0x280>)
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	2101      	movs	r1, #1
 8000436:	68ba      	ldr	r2, [r7, #8]
 8000438:	fa01 f202 	lsl.w	r2, r1, r2
 800043c:	4611      	mov	r1, r2
 800043e:	4a63      	ldr	r2, [pc, #396]	; (80005cc <GPIO_Init+0x280>)
 8000440:	430b      	orrs	r3, r1
 8000442:	6053      	str	r3, [r2, #4]
						GPIOA_PUPDR &= ~(0x03<<2*PIN_NO);
 8000444:	4b61      	ldr	r3, [pc, #388]	; (80005cc <GPIO_Init+0x280>)
 8000446:	68db      	ldr	r3, [r3, #12]
 8000448:	68ba      	ldr	r2, [r7, #8]
 800044a:	0052      	lsls	r2, r2, #1
 800044c:	2103      	movs	r1, #3
 800044e:	fa01 f202 	lsl.w	r2, r1, r2
 8000452:	43d2      	mvns	r2, r2
 8000454:	4611      	mov	r1, r2
 8000456:	4a5d      	ldr	r2, [pc, #372]	; (80005cc <GPIO_Init+0x280>)
 8000458:	400b      	ands	r3, r1
 800045a:	60d3      	str	r3, [r2, #12]
					break;
 800045c:	e017      	b.n	800048e <GPIO_Init+0x142>
						GPIOA_PUPDR |= (0x01 << 2*PIN_NO);
 800045e:	4b5b      	ldr	r3, [pc, #364]	; (80005cc <GPIO_Init+0x280>)
 8000460:	68db      	ldr	r3, [r3, #12]
 8000462:	68ba      	ldr	r2, [r7, #8]
 8000464:	0052      	lsls	r2, r2, #1
 8000466:	2101      	movs	r1, #1
 8000468:	fa01 f202 	lsl.w	r2, r1, r2
 800046c:	4611      	mov	r1, r2
 800046e:	4a57      	ldr	r2, [pc, #348]	; (80005cc <GPIO_Init+0x280>)
 8000470:	430b      	orrs	r3, r1
 8000472:	60d3      	str	r3, [r2, #12]
					break;
 8000474:	e00b      	b.n	800048e <GPIO_Init+0x142>
						GPIOA_PUPDR |= (0x02 << 2*PIN_NO);
 8000476:	4b55      	ldr	r3, [pc, #340]	; (80005cc <GPIO_Init+0x280>)
 8000478:	68db      	ldr	r3, [r3, #12]
 800047a:	68ba      	ldr	r2, [r7, #8]
 800047c:	0052      	lsls	r2, r2, #1
 800047e:	2102      	movs	r1, #2
 8000480:	fa01 f202 	lsl.w	r2, r1, r2
 8000484:	4611      	mov	r1, r2
 8000486:	4a51      	ldr	r2, [pc, #324]	; (80005cc <GPIO_Init+0x280>)
 8000488:	430b      	orrs	r3, r1
 800048a:	60d3      	str	r3, [r2, #12]
					break;
 800048c:	bf00      	nop
		break;
 800048e:	e092      	b.n	80005b6 <GPIO_Init+0x26a>
				RCC_AHB1ENR |= (0x01 <<1);
 8000490:	4b4d      	ldr	r3, [pc, #308]	; (80005c8 <GPIO_Init+0x27c>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000494:	4a4c      	ldr	r2, [pc, #304]	; (80005c8 <GPIO_Init+0x27c>)
 8000496:	f043 0302 	orr.w	r3, r3, #2
 800049a:	6313      	str	r3, [r2, #48]	; 0x30
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	2b03      	cmp	r3, #3
 80004a0:	d83b      	bhi.n	800051a <GPIO_Init+0x1ce>
 80004a2:	a201      	add	r2, pc, #4	; (adr r2, 80004a8 <GPIO_Init+0x15c>)
 80004a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004a8:	080004b9 	.word	0x080004b9
 80004ac:	080004d3 	.word	0x080004d3
 80004b0:	080004eb 	.word	0x080004eb
 80004b4:	08000503 	.word	0x08000503
							GPIOB_MODER &= ~(0x03 << 2*PIN_NO);
 80004b8:	4b45      	ldr	r3, [pc, #276]	; (80005d0 <GPIO_Init+0x284>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	68ba      	ldr	r2, [r7, #8]
 80004be:	0052      	lsls	r2, r2, #1
 80004c0:	2103      	movs	r1, #3
 80004c2:	fa01 f202 	lsl.w	r2, r1, r2
 80004c6:	43d2      	mvns	r2, r2
 80004c8:	4611      	mov	r1, r2
 80004ca:	4a41      	ldr	r2, [pc, #260]	; (80005d0 <GPIO_Init+0x284>)
 80004cc:	400b      	ands	r3, r1
 80004ce:	6013      	str	r3, [r2, #0]
					break;
 80004d0:	e023      	b.n	800051a <GPIO_Init+0x1ce>
							GPIOB_MODER |= (0x01 << 2*PIN_NO);
 80004d2:	4b3f      	ldr	r3, [pc, #252]	; (80005d0 <GPIO_Init+0x284>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	68ba      	ldr	r2, [r7, #8]
 80004d8:	0052      	lsls	r2, r2, #1
 80004da:	2101      	movs	r1, #1
 80004dc:	fa01 f202 	lsl.w	r2, r1, r2
 80004e0:	4611      	mov	r1, r2
 80004e2:	4a3b      	ldr	r2, [pc, #236]	; (80005d0 <GPIO_Init+0x284>)
 80004e4:	430b      	orrs	r3, r1
 80004e6:	6013      	str	r3, [r2, #0]
					break;
 80004e8:	e017      	b.n	800051a <GPIO_Init+0x1ce>
							GPIOB_MODER |= (0x02 << 2*PIN_NO);
 80004ea:	4b39      	ldr	r3, [pc, #228]	; (80005d0 <GPIO_Init+0x284>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	68ba      	ldr	r2, [r7, #8]
 80004f0:	0052      	lsls	r2, r2, #1
 80004f2:	2102      	movs	r1, #2
 80004f4:	fa01 f202 	lsl.w	r2, r1, r2
 80004f8:	4611      	mov	r1, r2
 80004fa:	4a35      	ldr	r2, [pc, #212]	; (80005d0 <GPIO_Init+0x284>)
 80004fc:	430b      	orrs	r3, r1
 80004fe:	6013      	str	r3, [r2, #0]
					break;
 8000500:	e00b      	b.n	800051a <GPIO_Init+0x1ce>
							GPIOB_MODER |= (0x03 << 2*PIN_NO);
 8000502:	4b33      	ldr	r3, [pc, #204]	; (80005d0 <GPIO_Init+0x284>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	68ba      	ldr	r2, [r7, #8]
 8000508:	0052      	lsls	r2, r2, #1
 800050a:	2103      	movs	r1, #3
 800050c:	fa01 f202 	lsl.w	r2, r1, r2
 8000510:	4611      	mov	r1, r2
 8000512:	4a2f      	ldr	r2, [pc, #188]	; (80005d0 <GPIO_Init+0x284>)
 8000514:	430b      	orrs	r3, r1
 8000516:	6013      	str	r3, [r2, #0]
					break;
 8000518:	bf00      	nop
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	2b04      	cmp	r3, #4
 800051e:	d84c      	bhi.n	80005ba <GPIO_Init+0x26e>
 8000520:	a201      	add	r2, pc, #4	; (adr r2, 8000528 <GPIO_Init+0x1dc>)
 8000522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000526:	bf00      	nop
 8000528:	0800053d 	.word	0x0800053d
 800052c:	08000555 	.word	0x08000555
 8000530:	0800056b 	.word	0x0800056b
 8000534:	08000585 	.word	0x08000585
 8000538:	0800059d 	.word	0x0800059d
							GPIOB_OTYPER &= ~(0x01<<PIN_NO);
 800053c:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <GPIO_Init+0x284>)
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	2101      	movs	r1, #1
 8000542:	68ba      	ldr	r2, [r7, #8]
 8000544:	fa01 f202 	lsl.w	r2, r1, r2
 8000548:	43d2      	mvns	r2, r2
 800054a:	4611      	mov	r1, r2
 800054c:	4a20      	ldr	r2, [pc, #128]	; (80005d0 <GPIO_Init+0x284>)
 800054e:	400b      	ands	r3, r1
 8000550:	6053      	str	r3, [r2, #4]
					break;
 8000552:	e02f      	b.n	80005b4 <GPIO_Init+0x268>
							GPIOB_OTYPER |= (0x01<<PIN_NO);
 8000554:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <GPIO_Init+0x284>)
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	2101      	movs	r1, #1
 800055a:	68ba      	ldr	r2, [r7, #8]
 800055c:	fa01 f202 	lsl.w	r2, r1, r2
 8000560:	4611      	mov	r1, r2
 8000562:	4a1b      	ldr	r2, [pc, #108]	; (80005d0 <GPIO_Init+0x284>)
 8000564:	430b      	orrs	r3, r1
 8000566:	6053      	str	r3, [r2, #4]
					break;
 8000568:	e024      	b.n	80005b4 <GPIO_Init+0x268>
						GPIOB_PUPDR &= ~(0x03<<2*PIN_NO);
 800056a:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <GPIO_Init+0x284>)
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	68ba      	ldr	r2, [r7, #8]
 8000570:	0052      	lsls	r2, r2, #1
 8000572:	2103      	movs	r1, #3
 8000574:	fa01 f202 	lsl.w	r2, r1, r2
 8000578:	43d2      	mvns	r2, r2
 800057a:	4611      	mov	r1, r2
 800057c:	4a14      	ldr	r2, [pc, #80]	; (80005d0 <GPIO_Init+0x284>)
 800057e:	400b      	ands	r3, r1
 8000580:	60d3      	str	r3, [r2, #12]
					break;
 8000582:	e017      	b.n	80005b4 <GPIO_Init+0x268>
						GPIOB_PUPDR |= (0x01 << 2*PIN_NO);
 8000584:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <GPIO_Init+0x284>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	68ba      	ldr	r2, [r7, #8]
 800058a:	0052      	lsls	r2, r2, #1
 800058c:	2101      	movs	r1, #1
 800058e:	fa01 f202 	lsl.w	r2, r1, r2
 8000592:	4611      	mov	r1, r2
 8000594:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <GPIO_Init+0x284>)
 8000596:	430b      	orrs	r3, r1
 8000598:	60d3      	str	r3, [r2, #12]
					break;
 800059a:	e00b      	b.n	80005b4 <GPIO_Init+0x268>
						GPIOB_PUPDR |= (0x02 << 2*PIN_NO);
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <GPIO_Init+0x284>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	68ba      	ldr	r2, [r7, #8]
 80005a2:	0052      	lsls	r2, r2, #1
 80005a4:	2102      	movs	r1, #2
 80005a6:	fa01 f202 	lsl.w	r2, r1, r2
 80005aa:	4611      	mov	r1, r2
 80005ac:	4a08      	ldr	r2, [pc, #32]	; (80005d0 <GPIO_Init+0x284>)
 80005ae:	430b      	orrs	r3, r1
 80005b0:	60d3      	str	r3, [r2, #12]
					break;
 80005b2:	bf00      	nop
		break;
 80005b4:	e001      	b.n	80005ba <GPIO_Init+0x26e>
		break;
 80005b6:	bf00      	nop
 80005b8:	e000      	b.n	80005bc <GPIO_Init+0x270>
		break;
 80005ba:	bf00      	nop
}
 80005bc:	bf00      	nop
 80005be:	3714      	adds	r7, #20
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40020000 	.word	0x40020000
 80005d0:	40020400 	.word	0x40020400

080005d4 <GPIO_WritePin>:

unsigned char GPIO_WritePin(char Port, unsigned int PIN_NO, unsigned int Data)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b087      	sub	sp, #28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
 80005e0:	73fb      	strb	r3, [r7, #15]
	unsigned char result;
	switch(Port)
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	2b41      	cmp	r3, #65	; 0x41
 80005e6:	d002      	beq.n	80005ee <GPIO_WritePin+0x1a>
 80005e8:	2b42      	cmp	r3, #66	; 0x42
 80005ea:	d02d      	beq.n	8000648 <GPIO_WritePin+0x74>
 80005ec:	e059      	b.n	80006a2 <GPIO_WritePin+0xce>
	{
		case('A'):
			if((GPIOA_MODER & (0x03 << 2*PIN_NO)) >> (2*PIN_NO) == 0x01)
 80005ee:	4b30      	ldr	r3, [pc, #192]	; (80006b0 <GPIO_WritePin+0xdc>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	68ba      	ldr	r2, [r7, #8]
 80005f4:	0052      	lsls	r2, r2, #1
 80005f6:	2103      	movs	r1, #3
 80005f8:	fa01 f202 	lsl.w	r2, r1, r2
 80005fc:	401a      	ands	r2, r3
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	fa22 f303 	lsr.w	r3, r2, r3
 8000606:	2b01      	cmp	r3, #1
 8000608:	d11b      	bne.n	8000642 <GPIO_WritePin+0x6e>
			{
			     if(Data)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d00a      	beq.n	8000626 <GPIO_WritePin+0x52>
			     {
			    	 GPIOA_ODR |= (1<<PIN_NO);
 8000610:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <GPIO_WritePin+0xdc>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	2101      	movs	r1, #1
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	fa01 f202 	lsl.w	r2, r1, r2
 800061c:	4611      	mov	r1, r2
 800061e:	4a24      	ldr	r2, [pc, #144]	; (80006b0 <GPIO_WritePin+0xdc>)
 8000620:	430b      	orrs	r3, r1
 8000622:	6153      	str	r3, [r2, #20]
 8000624:	e00a      	b.n	800063c <GPIO_WritePin+0x68>
			     }
			     else
			     {
			    	 GPIOA_ODR &= ~(1<<PIN_NO);
 8000626:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <GPIO_WritePin+0xdc>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	2101      	movs	r1, #1
 800062c:	68ba      	ldr	r2, [r7, #8]
 800062e:	fa01 f202 	lsl.w	r2, r1, r2
 8000632:	43d2      	mvns	r2, r2
 8000634:	4611      	mov	r1, r2
 8000636:	4a1e      	ldr	r2, [pc, #120]	; (80006b0 <GPIO_WritePin+0xdc>)
 8000638:	400b      	ands	r3, r1
 800063a:	6153      	str	r3, [r2, #20]
			     }
				result = OK;
 800063c:	2300      	movs	r3, #0
 800063e:	75fb      	strb	r3, [r7, #23]
			}
			else
			{
				result = NOK;
			}
		break;
 8000640:	e02f      	b.n	80006a2 <GPIO_WritePin+0xce>
				result = NOK;
 8000642:	2301      	movs	r3, #1
 8000644:	75fb      	strb	r3, [r7, #23]
		break;
 8000646:	e02c      	b.n	80006a2 <GPIO_WritePin+0xce>
		case('B'):
				if((GPIOB_MODER & (0x03 << 2*PIN_NO))>> (2*PIN_NO)== 0x01)
 8000648:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <GPIO_WritePin+0xe0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	68ba      	ldr	r2, [r7, #8]
 800064e:	0052      	lsls	r2, r2, #1
 8000650:	2103      	movs	r1, #3
 8000652:	fa01 f202 	lsl.w	r2, r1, r2
 8000656:	401a      	ands	r2, r3
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	fa22 f303 	lsr.w	r3, r2, r3
 8000660:	2b01      	cmp	r3, #1
 8000662:	d11b      	bne.n	800069c <GPIO_WritePin+0xc8>
				{
					 if(Data)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d00a      	beq.n	8000680 <GPIO_WritePin+0xac>
					 {
						 GPIOB_ODR |= (1<<PIN_NO);
 800066a:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <GPIO_WritePin+0xe0>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	2101      	movs	r1, #1
 8000670:	68ba      	ldr	r2, [r7, #8]
 8000672:	fa01 f202 	lsl.w	r2, r1, r2
 8000676:	4611      	mov	r1, r2
 8000678:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <GPIO_WritePin+0xe0>)
 800067a:	430b      	orrs	r3, r1
 800067c:	6153      	str	r3, [r2, #20]
 800067e:	e00a      	b.n	8000696 <GPIO_WritePin+0xc2>
					 }
					 else
					 {
						 GPIOB_ODR &= ~(1<<PIN_NO);
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <GPIO_WritePin+0xe0>)
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	2101      	movs	r1, #1
 8000686:	68ba      	ldr	r2, [r7, #8]
 8000688:	fa01 f202 	lsl.w	r2, r1, r2
 800068c:	43d2      	mvns	r2, r2
 800068e:	4611      	mov	r1, r2
 8000690:	4a08      	ldr	r2, [pc, #32]	; (80006b4 <GPIO_WritePin+0xe0>)
 8000692:	400b      	ands	r3, r1
 8000694:	6153      	str	r3, [r2, #20]
					 }
					result = OK;
 8000696:	2300      	movs	r3, #0
 8000698:	75fb      	strb	r3, [r7, #23]
				else
				{
					result = NOK;
				}

		break;
 800069a:	e001      	b.n	80006a0 <GPIO_WritePin+0xcc>
					result = NOK;
 800069c:	2301      	movs	r3, #1
 800069e:	75fb      	strb	r3, [r7, #23]
		break;
 80006a0:	bf00      	nop

	}// end switch

	return result;
 80006a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	371c      	adds	r7, #28
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	40020000 	.word	0x40020000
 80006b4:	40020400 	.word	0x40020400

080006b8 <GPIO_ReadPin>:


unsigned char GPIO_ReadPin(char Port, unsigned int PIN_NO)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]
	unsigned char result;

	switch(Port)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	2b41      	cmp	r3, #65	; 0x41
 80006c8:	d002      	beq.n	80006d0 <GPIO_ReadPin+0x18>
 80006ca:	2b42      	cmp	r3, #66	; 0x42
 80006cc:	d022      	beq.n	8000714 <GPIO_ReadPin+0x5c>
 80006ce:	e046      	b.n	800075e <GPIO_ReadPin+0xa6>
	{
		case('A'):
			if((GPIOA_MODER & (0x03 << 2*PIN_NO)) >> (2*PIN_NO) == 0x00)
 80006d0:	4b26      	ldr	r3, [pc, #152]	; (800076c <GPIO_ReadPin+0xb4>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	683a      	ldr	r2, [r7, #0]
 80006d6:	0052      	lsls	r2, r2, #1
 80006d8:	2103      	movs	r1, #3
 80006da:	fa01 f202 	lsl.w	r2, r1, r2
 80006de:	401a      	ands	r2, r3
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	fa22 f303 	lsr.w	r3, r2, r3
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d135      	bne.n	8000758 <GPIO_ReadPin+0xa0>
			{


			    if ((GPIOA_IDR &= (1<<PIN_NO))>> (PIN_NO) == 0x01){
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <GPIO_ReadPin+0xb4>)
 80006ee:	691b      	ldr	r3, [r3, #16]
 80006f0:	2101      	movs	r1, #1
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	fa01 f202 	lsl.w	r2, r1, r2
 80006f8:	4611      	mov	r1, r2
 80006fa:	4a1c      	ldr	r2, [pc, #112]	; (800076c <GPIO_ReadPin+0xb4>)
 80006fc:	400b      	ands	r3, r1
 80006fe:	6113      	str	r3, [r2, #16]
 8000700:	683a      	ldr	r2, [r7, #0]
 8000702:	40d3      	lsrs	r3, r2
 8000704:	2b01      	cmp	r3, #1
 8000706:	d102      	bne.n	800070e <GPIO_ReadPin+0x56>
			    	result= 1;
 8000708:	2301      	movs	r3, #1
 800070a:	73fb      	strb	r3, [r7, #15]
			     else
			     {
			    	 result= 0;
			     }
			}
		break;
 800070c:	e024      	b.n	8000758 <GPIO_ReadPin+0xa0>
			    	 result= 0;
 800070e:	2300      	movs	r3, #0
 8000710:	73fb      	strb	r3, [r7, #15]
		break;
 8000712:	e021      	b.n	8000758 <GPIO_ReadPin+0xa0>
		case('B'):
			if((GPIOB_MODER & (0x03 << 2*PIN_NO)) >> (2*PIN_NO) == 0x00)
 8000714:	4b16      	ldr	r3, [pc, #88]	; (8000770 <GPIO_ReadPin+0xb8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	683a      	ldr	r2, [r7, #0]
 800071a:	0052      	lsls	r2, r2, #1
 800071c:	2103      	movs	r1, #3
 800071e:	fa01 f202 	lsl.w	r2, r1, r2
 8000722:	401a      	ands	r2, r3
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	fa22 f303 	lsr.w	r3, r2, r3
 800072c:	2b00      	cmp	r3, #0
 800072e:	d115      	bne.n	800075c <GPIO_ReadPin+0xa4>
				{
				  if ((GPIOB_IDR &= (1<<PIN_NO))>> (PIN_NO) == 0x01){
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <GPIO_ReadPin+0xb8>)
 8000732:	691b      	ldr	r3, [r3, #16]
 8000734:	2101      	movs	r1, #1
 8000736:	683a      	ldr	r2, [r7, #0]
 8000738:	fa01 f202 	lsl.w	r2, r1, r2
 800073c:	4611      	mov	r1, r2
 800073e:	4a0c      	ldr	r2, [pc, #48]	; (8000770 <GPIO_ReadPin+0xb8>)
 8000740:	400b      	ands	r3, r1
 8000742:	6113      	str	r3, [r2, #16]
 8000744:	683a      	ldr	r2, [r7, #0]
 8000746:	40d3      	lsrs	r3, r2
 8000748:	2b01      	cmp	r3, #1
 800074a:	d102      	bne.n	8000752 <GPIO_ReadPin+0x9a>
					  result= 1;
 800074c:	2301      	movs	r3, #1
 800074e:	73fb      	strb	r3, [r7, #15]
				 else
				 {
					 result= 0;
				 }
			}
		break;
 8000750:	e004      	b.n	800075c <GPIO_ReadPin+0xa4>
					 result= 0;
 8000752:	2300      	movs	r3, #0
 8000754:	73fb      	strb	r3, [r7, #15]
		break;
 8000756:	e001      	b.n	800075c <GPIO_ReadPin+0xa4>
		break;
 8000758:	bf00      	nop
 800075a:	e000      	b.n	800075e <GPIO_ReadPin+0xa6>
		break;
 800075c:	bf00      	nop

	}// end switch

	return result;
 800075e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000760:	4618      	mov	r0, r3
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	40020000 	.word	0x40020000
 8000770:	40020400 	.word	0x40020400

08000774 <__libc_init_array>:
 8000774:	b570      	push	{r4, r5, r6, lr}
 8000776:	4d0d      	ldr	r5, [pc, #52]	; (80007ac <__libc_init_array+0x38>)
 8000778:	4c0d      	ldr	r4, [pc, #52]	; (80007b0 <__libc_init_array+0x3c>)
 800077a:	1b64      	subs	r4, r4, r5
 800077c:	10a4      	asrs	r4, r4, #2
 800077e:	2600      	movs	r6, #0
 8000780:	42a6      	cmp	r6, r4
 8000782:	d109      	bne.n	8000798 <__libc_init_array+0x24>
 8000784:	4d0b      	ldr	r5, [pc, #44]	; (80007b4 <__libc_init_array+0x40>)
 8000786:	4c0c      	ldr	r4, [pc, #48]	; (80007b8 <__libc_init_array+0x44>)
 8000788:	f000 f818 	bl	80007bc <_init>
 800078c:	1b64      	subs	r4, r4, r5
 800078e:	10a4      	asrs	r4, r4, #2
 8000790:	2600      	movs	r6, #0
 8000792:	42a6      	cmp	r6, r4
 8000794:	d105      	bne.n	80007a2 <__libc_init_array+0x2e>
 8000796:	bd70      	pop	{r4, r5, r6, pc}
 8000798:	f855 3b04 	ldr.w	r3, [r5], #4
 800079c:	4798      	blx	r3
 800079e:	3601      	adds	r6, #1
 80007a0:	e7ee      	b.n	8000780 <__libc_init_array+0xc>
 80007a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80007a6:	4798      	blx	r3
 80007a8:	3601      	adds	r6, #1
 80007aa:	e7f2      	b.n	8000792 <__libc_init_array+0x1e>
 80007ac:	080007d4 	.word	0x080007d4
 80007b0:	080007d4 	.word	0x080007d4
 80007b4:	080007d4 	.word	0x080007d4
 80007b8:	080007d8 	.word	0x080007d8

080007bc <_init>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	bf00      	nop
 80007c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007c2:	bc08      	pop	{r3}
 80007c4:	469e      	mov	lr, r3
 80007c6:	4770      	bx	lr

080007c8 <_fini>:
 80007c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ca:	bf00      	nop
 80007cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007ce:	bc08      	pop	{r3}
 80007d0:	469e      	mov	lr, r3
 80007d2:	4770      	bx	lr
