
task 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001d0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000364  0800036c  0001036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000364  08000364  0001036c  2**0
                  CONTENTS
  4 .ARM          00000000  08000364  08000364  0001036c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000364  0800036c  0001036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000364  08000364  00010364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000368  08000368  00010368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800036c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800036c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001036c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000098b  00000000  00000000  0001039c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000023b  00000000  00000000  00010d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00010f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000048  00000000  00000000  00010fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dd5f  00000000  00000000  00011020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000a44  00000000  00000000  0001ed7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fada  00000000  00000000  0001f7c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0006f29d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000b0  00000000  00000000  0006f2f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800034c 	.word	0x0800034c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800034c 	.word	0x0800034c

080001d4 <main>:
 ============================================================================
*/

#include "stm32f401cc_interface.h"

int main(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0

	unsigned char color=1;
 80001da:	2301      	movs	r3, #1
 80001dc:	71fb      	strb	r3, [r7, #7]
	int i;

	RCC_AHB1ENR |= (1<<1);  /* enable portB clock */
 80001de:	4b29      	ldr	r3, [pc, #164]	; (8000284 <main+0xb0>)
 80001e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e2:	4a28      	ldr	r2, [pc, #160]	; (8000284 <main+0xb0>)
 80001e4:	f043 0302 	orr.w	r3, r3, #2
 80001e8:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOB_MODER &= ~(3<<6);  /*make portB pin3 input*/
 80001ea:	4b27      	ldr	r3, [pc, #156]	; (8000288 <main+0xb4>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a26      	ldr	r2, [pc, #152]	; (8000288 <main+0xb4>)
 80001f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80001f4:	6013      	str	r3, [r2, #0]
	GPIOB_PUPDR |= (1<<6);   /*Pull-UP configuration for pin3*/
 80001f6:	4b24      	ldr	r3, [pc, #144]	; (8000288 <main+0xb4>)
 80001f8:	68db      	ldr	r3, [r3, #12]
 80001fa:	4a23      	ldr	r2, [pc, #140]	; (8000288 <main+0xb4>)
 80001fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000200:	60d3      	str	r3, [r2, #12]

	GPIOB_MODER |= (1<<10)|(1<<12)|(1<<14);  /*make portB pin 5,6,7 output*/
 8000202:	4b21      	ldr	r3, [pc, #132]	; (8000288 <main+0xb4>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a20      	ldr	r2, [pc, #128]	; (8000288 <main+0xb4>)
 8000208:	f443 43a8 	orr.w	r3, r3, #21504	; 0x5400
 800020c:	6013      	str	r3, [r2, #0]

	/*GPIOB_OTYPER &= ~(1<<5) & ~(1<<6) & ~(1<<7); to make the pins push-pull but this is the default state*/

	GPIOB_ODR &= ~(1<<5) &~(1<<6) &~(1<<7); /*set the RGB led to first color black*/
 800020e:	4b1e      	ldr	r3, [pc, #120]	; (8000288 <main+0xb4>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	4a1d      	ldr	r2, [pc, #116]	; (8000288 <main+0xb4>)
 8000214:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8000218:	6153      	str	r3, [r2, #20]

  while (1) {

	  if(!(GPIOB_IDR & (1<<3))){     /*check if the button is pressed*/
 800021a:	4b1b      	ldr	r3, [pc, #108]	; (8000288 <main+0xb4>)
 800021c:	691b      	ldr	r3, [r3, #16]
 800021e:	f003 0308 	and.w	r3, r3, #8
 8000222:	2b00      	cmp	r3, #0
 8000224:	d1f9      	bne.n	800021a <main+0x46>

		  for(i=0;i<50000;i++){}	/*delay before check the button again for debouncing*/
 8000226:	2300      	movs	r3, #0
 8000228:	603b      	str	r3, [r7, #0]
 800022a:	e002      	b.n	8000232 <main+0x5e>
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	3301      	adds	r3, #1
 8000230:	603b      	str	r3, [r7, #0]
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000238:	4293      	cmp	r3, r2
 800023a:	ddf7      	ble.n	800022c <main+0x58>

		  if(!(GPIOB_IDR & (1<<3))){	/*check again if the button is pressed*/
 800023c:	4b12      	ldr	r3, [pc, #72]	; (8000288 <main+0xb4>)
 800023e:	691b      	ldr	r3, [r3, #16]
 8000240:	f003 0308 	and.w	r3, r3, #8
 8000244:	2b00      	cmp	r3, #0
 8000246:	d115      	bne.n	8000274 <main+0xa0>

			  GPIOB_ODR &= ~(7<<5); 	/*clear the three bits to put next color*/
 8000248:	4b0f      	ldr	r3, [pc, #60]	; (8000288 <main+0xb4>)
 800024a:	695b      	ldr	r3, [r3, #20]
 800024c:	4a0e      	ldr	r2, [pc, #56]	; (8000288 <main+0xb4>)
 800024e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8000252:	6153      	str	r3, [r2, #20]
			  GPIOB_ODR |= (color<<5); 	/*set the RGB led to next color*/
 8000254:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <main+0xb4>)
 8000256:	695b      	ldr	r3, [r3, #20]
 8000258:	79fa      	ldrb	r2, [r7, #7]
 800025a:	0152      	lsls	r2, r2, #5
 800025c:	4611      	mov	r1, r2
 800025e:	4a0a      	ldr	r2, [pc, #40]	; (8000288 <main+0xb4>)
 8000260:	430b      	orrs	r3, r1
 8000262:	6153      	str	r3, [r2, #20]

			  color++;
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	3301      	adds	r3, #1
 8000268:	71fb      	strb	r3, [r7, #7]

			  if (8==color){
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	2b08      	cmp	r3, #8
 800026e:	d101      	bne.n	8000274 <main+0xa0>
				  color=0;			/*only have 8 colors from 0 to 7*/
 8000270:	2300      	movs	r3, #0
 8000272:	71fb      	strb	r3, [r7, #7]
			  }
		  }

		  while (!(GPIOB_IDR & (1<<3))){} 	/*wait until the button is released before considering a new button press*/
 8000274:	bf00      	nop
 8000276:	4b04      	ldr	r3, [pc, #16]	; (8000288 <main+0xb4>)
 8000278:	691b      	ldr	r3, [r3, #16]
 800027a:	f003 0308 	and.w	r3, r3, #8
 800027e:	2b00      	cmp	r3, #0
 8000280:	d0f9      	beq.n	8000276 <main+0xa2>
	  if(!(GPIOB_IDR & (1<<3))){     /*check if the button is pressed*/
 8000282:	e7ca      	b.n	800021a <main+0x46>
 8000284:	40023800 	.word	0x40023800
 8000288:	40020400 	.word	0x40020400

0800028c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000290:	4b06      	ldr	r3, [pc, #24]	; (80002ac <SystemInit+0x20>)
 8000292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000296:	4a05      	ldr	r2, [pc, #20]	; (80002ac <SystemInit+0x20>)
 8000298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800029c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	e000ed00 	.word	0xe000ed00

080002b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002b4:	480d      	ldr	r0, [pc, #52]	; (80002ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80002b6:	490e      	ldr	r1, [pc, #56]	; (80002f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80002b8:	4a0e      	ldr	r2, [pc, #56]	; (80002f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002bc:	e002      	b.n	80002c4 <LoopCopyDataInit>

080002be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c2:	3304      	adds	r3, #4

080002c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c8:	d3f9      	bcc.n	80002be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ca:	4a0b      	ldr	r2, [pc, #44]	; (80002f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80002cc:	4c0b      	ldr	r4, [pc, #44]	; (80002fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d0:	e001      	b.n	80002d6 <LoopFillZerobss>

080002d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d4:	3204      	adds	r2, #4

080002d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d8:	d3fb      	bcc.n	80002d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80002da:	f7ff ffd7 	bl	800028c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002de:	f000 f811 	bl	8000304 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002e2:	f7ff ff77 	bl	80001d4 <main>
  bx  lr    
 80002e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80002e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80002ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f4:	0800036c 	.word	0x0800036c
  ldr r2, =_sbss
 80002f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002fc:	2000001c 	.word	0x2000001c

08000300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000300:	e7fe      	b.n	8000300 <ADC_IRQHandler>
	...

08000304 <__libc_init_array>:
 8000304:	b570      	push	{r4, r5, r6, lr}
 8000306:	4d0d      	ldr	r5, [pc, #52]	; (800033c <__libc_init_array+0x38>)
 8000308:	4c0d      	ldr	r4, [pc, #52]	; (8000340 <__libc_init_array+0x3c>)
 800030a:	1b64      	subs	r4, r4, r5
 800030c:	10a4      	asrs	r4, r4, #2
 800030e:	2600      	movs	r6, #0
 8000310:	42a6      	cmp	r6, r4
 8000312:	d109      	bne.n	8000328 <__libc_init_array+0x24>
 8000314:	4d0b      	ldr	r5, [pc, #44]	; (8000344 <__libc_init_array+0x40>)
 8000316:	4c0c      	ldr	r4, [pc, #48]	; (8000348 <__libc_init_array+0x44>)
 8000318:	f000 f818 	bl	800034c <_init>
 800031c:	1b64      	subs	r4, r4, r5
 800031e:	10a4      	asrs	r4, r4, #2
 8000320:	2600      	movs	r6, #0
 8000322:	42a6      	cmp	r6, r4
 8000324:	d105      	bne.n	8000332 <__libc_init_array+0x2e>
 8000326:	bd70      	pop	{r4, r5, r6, pc}
 8000328:	f855 3b04 	ldr.w	r3, [r5], #4
 800032c:	4798      	blx	r3
 800032e:	3601      	adds	r6, #1
 8000330:	e7ee      	b.n	8000310 <__libc_init_array+0xc>
 8000332:	f855 3b04 	ldr.w	r3, [r5], #4
 8000336:	4798      	blx	r3
 8000338:	3601      	adds	r6, #1
 800033a:	e7f2      	b.n	8000322 <__libc_init_array+0x1e>
 800033c:	08000364 	.word	0x08000364
 8000340:	08000364 	.word	0x08000364
 8000344:	08000364 	.word	0x08000364
 8000348:	08000368 	.word	0x08000368

0800034c <_init>:
 800034c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034e:	bf00      	nop
 8000350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000352:	bc08      	pop	{r3}
 8000354:	469e      	mov	lr, r3
 8000356:	4770      	bx	lr

08000358 <_fini>:
 8000358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035a:	bf00      	nop
 800035c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035e:	bc08      	pop	{r3}
 8000360:	469e      	mov	lr, r3
 8000362:	4770      	bx	lr
